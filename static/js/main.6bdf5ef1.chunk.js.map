{"version":3,"sources":["components/Cell.js","components/Board.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","className","onClick","value","Board","restartButton","React","createRef","i","this","cells","renderCell","id","onReset","Component","Game","initialState","xTurn","stepNumber","history","Array","fill","state","setState","slice","length","calculateWinner","concat","status","currentState","winner","handleClick","resetBoard","winningCombinations","a","b","c","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6bdf5ef1.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Cell(props) {\r\n    return (\r\n        <button className='cell' onClick={props.onClick}>\r\n            {props.value}\r\n        </button>\r\n    )\r\n}\r\n","import React, { Component } from 'react';\r\nimport Cell from './Cell';\r\n\r\nexport default class Board extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        // create a ref to store the restartButton DOM element\r\n        this.restartButton = React.createRef();\r\n    }\r\n    renderCell(i){\r\n        return <Cell value={this.props.cells[i]}\r\n        onClick={()=>this.props.onClick(i)}\r\n        />\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className='border-row'>\r\n                    {this.renderCell(0)} \r\n                    {this.renderCell(1)} \r\n                    {this.renderCell(2)}\r\n\r\n                </div>\r\n                <div className='border-row'>\r\n                    {this.renderCell(3)} \r\n                    {this.renderCell(4)} \r\n                    {this.renderCell(5)}\r\n\r\n                </div>\r\n                <div className='border-row'>\r\n                    {this.renderCell(6)} \r\n                    {this.renderCell(7)} \r\n                    {this.renderCell(8)}\r\n\r\n                </div>\r\n                <div>\r\n                    <button id='restart' onClick={this.props.onReset}> Restart </button>\r\n                </div>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Board from './Board';\r\n\r\nexport default class Game extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.initialState = {\r\n            xTurn: true,\r\n            stepNumber: 0,\r\n            history: [\r\n                { cells: Array(9).fill(null) }\r\n            ]\r\n\r\n        };\r\n        this.state = this.initialState;\r\n    }\r\n    resetBoard() {\r\n        this.setState(this.initialState);\r\n    }\r\n    handleClick(i) {\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const currentState = history[history.length - 1];\r\n        const cells = currentState.cells.slice();\r\n        const winner = calculateWinner(cells);\r\n        if (winner || cells[i]) {\r\n            return;\r\n        }\r\n        cells[i] = this.state.xTurn ? 'X' : 'O';\r\n        this.setState({\r\n            history: history.concat({\r\n                cells: cells\r\n            }),\r\n            xTurn: !this.state.xTurn,\r\n            stepNumber: history.length\r\n        });\r\n\r\n    }\r\n    render() {\r\n        const history = this.state.history;\r\n        const currentState = history[this.state.stepNumber];\r\n        const winner = calculateWinner(currentState.cells);\r\n        let status;\r\n        if (winner) {\r\n            status = winner + ' Wins!';\r\n\r\n        }\r\n        if (this.state.stepNumber >= 9) {\r\n            status = 'X-O Tie!';\r\n        }\r\n        return (\r\n            <div className='game'>\r\n                <div className=\"game-info\">\r\n                    <div>{status}</div>\r\n                </div>\r\n                <div className='game-board'>\r\n                    <Board onClick={(i) => this.handleClick(i)}\r\n                        onReset={() => this.resetBoard()}\r\n                        cells={currentState.cells} />\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\nfunction calculateWinner(cells) {\r\n    const winningCombinations = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6]\r\n    ];\r\n\r\n    for (let i = 0; i < winningCombinations.length; i++) {\r\n        const [a, b, c] = winningCombinations[i];\r\n        if (cells[a] && cells[a] === cells[b] && cells[b] === cells[c]) {\r\n            return cells[a];\r\n        }\r\n    }\r\n\r\n    return null;\r\n}","import React from 'react';\nimport './App.css';\nimport Game from './components/Game';\n\nfunction App() {\n  return (\n   <Game/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}